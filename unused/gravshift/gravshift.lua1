require "/scripts/util.lua"
require "/scripts/interp.lua"
require "/scripts/vec2.lua"
require "/scripts/rect.lua"

-- Base gun fire ability
gravshiftUse = WeaponAbility:new()

function gravshiftUse:init()
  self.weapon:setStance(self.stances.idle)

  self.cooldownTimer = self.fireTime

  self.weapon.onLeaveAbility = function()
    self.weapon:setStance(self.stances.idle)
    activeItem.setScriptedAnimationParameter("chains", {})
  end
end

function gravshiftUse:update(dt, fireMode, shiftHeld)
  WeaponAbility.update(self, dt, fireMode, shiftHeld)

  self.cooldownTimer = math.max(0, self.cooldownTimer - self.dt)

  if animator.animationState("firing") == "off" then
    animator.setLightActive("muzzleFlash", false)
  end

  if self.fireMode == (self.activatingFireMode or self.abilitySlot)
    and not self.weapon.currentAbility
    and animator.animationState("firing") == "off"
    and self.cooldownTimer == 0
    and not status.resourceLocked("energy")
    and not world.lineTileCollision(mcontroller.position(), self:firePosition()) then

    self:setState(self.charge)
    
  end
end

function gravshiftUse:charge()

  animator.setLightActive("muzzleFlash", true)
  self.weapon:setStance(self.stances.charge)
  self.weapon:updateAim()
  animator.playSound("charge")
  animator.setAnimationState("firing", "ch")

  local chargeTimer = self.stances.charge.duration
  while chargeTimer > 0 and self.fireMode == (self.activatingFireMode or self.abilitySlot) do
    local beamStart = self:firePosition()
    local beamEnd = self:EndPoint(activeItem.ownerAimPosition())
    local collidePoint = world.lineCollision(beamStart, beamEnd)
  if collidePoint then
    beamEnd = collidePoint
  end
    chargeTimer = chargeTimer - self.dt
    if self:targetValid(self:EndPoint(activeItem.ownerAimPosition())) then
          self:drawBeam(beamEnd, collidePoint)
        else
          activeItem.setScriptedAnimationParameter("chains", {})
    end
    coroutine.yield()
    if chargeTimer <= 0 and self:targetValid(self:EndPoint(activeItem.ownerAimPosition())) then
      self.targetPosition = self:findBlinkPosition()
        if self.targetPosition then self:setState(self.fire) end
    end
  end
--    animator.playSound(self.elementalType.."discharge")
end

--  function gravshiftUse:charge()
--  self.weapon:setStance(self.stances.charge)
--  self.weapon:updateAim()
--  animator.playSound("charge")
--  animator.setAnimationState("firing", "ch0")
--
--  util.wait(self.stances.charge.duration, function()
--  end)
--  self:setState(self.fire)
--end

function gravshiftUse:fire()
  status.overConsumeResource("energy", self:energyPerShot())
  self.weapon:setStance(self.stances.fire)
--  animator.setParticleEmitterActive("charged", false)
--  animator.setParticleEmitterActive("chargedback", false)
  status.addEphemeralEffect("blink")
  world.spawnProjectile(self.projectileType, mcontroller.position(), activeItem.ownerEntityId(), {0,0}, false, params)
  util.wait(0.25, function(dt)
    mcontroller.controlModifiers({ movementSuppressed = true })
  end)
  mcontroller.setPosition(self.targetPosition)
  world.spawnProjectile(self.projectileType, mcontroller.position(), activeItem.ownerEntityId(), {0,0}, false, params)
  self:muzzleFlash()
  activeItem.setScriptedAnimationParameter("chains", {})

  if self.stances.fire.duration then
    util.wait(self.stances.fire.duration)
  end
--  status.setPrimaryDirectives()
  self.cooldownTimer = self.fireTime
  self:setState(self.cooldown)

end

--function blinkAnim()
--  animator.setAnimationState("blinking", "in")
--  util.wait(0.1)
--  animator.setAnimationState("blinking", "out")
--end

function gravshiftUse:cooldown()
  self.weapon:setStance(self.stances.cooldown)
  self.weapon:updateAim()

  local progress = 0
  util.wait(self.stances.cooldown.duration, function()
    local from = self.stances.cooldown.weaponOffset or {0,0}
    local to = self.stances.idle.weaponOffset or {0,0}
    self.weapon.weaponOffset = {interp.linear(progress, from[1], to[1]), interp.linear(progress, from[2], to[2])}

    self.weapon.relativeWeaponRotation = util.toRadians(interp.linear(progress, self.stances.cooldown.weaponRotation, self.stances.idle.weaponRotation))
    self.weapon.relativeArmRotation = util.toRadians(interp.linear(progress, self.stances.cooldown.armRotation, self.stances.idle.armRotation))

    progress = math.min(1.0, progress + (self.dt / self.stances.cooldown.duration))
  end)
end

function gravshiftUse:drawBeam(endPos, didCollide)
  local newChain = copy(self.chain)
  newChain.startOffset = vec2.add(self.weapon.muzzleOffset, self.chain.startOffset or 0)
  newChain.endPosition = endPos

  activeItem.setScriptedAnimationParameter("chains", {newChain})
end

function gravshiftUse:muzzleFlash()
  animator.setPartTag("muzzleFlash", "variant", math.random(1, self.muzzleFlashVariants or 3))
  animator.setAnimationState("firing", "fire")
  animator.burstParticleEmitter("muzzleFlash")
--  animator.burstParticleEmitter("backexhaust")
  animator.playSound("fire")

end

function gravshiftUse:firePosition()
  return vec2.add(mcontroller.position(), activeItem.handPosition(self.weapon.muzzleOffset))
end

function gravshiftUse:targetValid(aimPos)
  local focusPos = self:firePosition()
  return not world.lineTileCollision(mcontroller.position(), focusPos)
      and not world.lineTileCollision(focusPos, aimPos)
end

function gravshiftUse:EndPoint(aimPos)
  local focusPos = self:firePosition()
  if world.magnitude(focusPos, aimPos) > self.maxCastRange then
    aimPos = vec2.add(self:firePosition(), vec2.mul(vec2.norm(self:aimVector(0)), self.maxCastRange))
  end
  return aimPos
end

function gravshiftUse:findBlinkPosition()
  local position = self:EndPoint(activeItem.ownerAimPosition())
      local bounds = rect.translate(mcontroller.boundBox(), position)
      if not world.rectTileCollision(bounds, {"Null", "Block", "Dynamic", "Slippery"}) then
        return position
      else
        local oneUp = {position[1], position[2] + 1}
        bounds = rect.translate(mcontroller.boundBox(), oneUp)
        if not world.rectTileCollision(bounds, {"Null", "Block", "Dynamic", "Slippery"}) then
          return oneUp
        else
            local twoUp = {position[1], position[2] + 2}
          bounds = rect.translate(mcontroller.boundBox(), twoUp)
          if not world.rectTileCollision(bounds, {"Null", "Block", "Dynamic", "Slippery"}) then
            return twoUp
          else
            local oneDown = {position[1], position[2] - 1}
            bounds = rect.translate(mcontroller.boundBox(), oneDown)
            if not world.rectTileCollision(bounds, {"Null", "Block", "Dynamic", "Slippery"}) then
              return oneDown
            end
          end
        end
      end
end

function gravshiftUse:aimVector(inaccuracy)
  local aimVector = vec2.rotate({1, 0}, self.weapon.aimAngle + sb.nrand(inaccuracy, 0))
  aimVector[1] = aimVector[1] * mcontroller.facingDirection()
  return aimVector
end

function gravshiftUse:energyPerShot()
  return self.energyUsage * self.fireTime * (self.energyUsageMultiplier or 1.0)
end

function gravshiftUse:uninit()
--  animator.setParticleEmitterActive("charged", false)
--  animator.setParticleEmitterActive("chargedback", false)
--  animator.setParticleEmitterActive("cooldown", false)
--  animator.stopAllSounds("charged")
--  animator.stopAllSounds("zonepower")
  activeItem.setScriptedAnimationParameter("chains", {})
  if animator.animationState("firing") == "loop" then
    animator.setAnimationState("firing","stop")
  end
end
